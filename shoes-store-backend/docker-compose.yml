services:

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    image: eureka-service:latest
    container_name: eureka-server
    depends_on:
      - logstash
      - kafka-1
      - zookeeper
      - mysql
      - redis
      - elasticsearch
      - kibana
    ports:
      - "8761:8761"
    networks:
      - backend

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    image: api-gateway:latest
    container_name: api-gateway
    depends_on:
      - eureka-server
    env_file:
      - ./api-gateway/.envrc.docker
    ports:
      - "8888:8888"
    networks:
      - backend

  identity-service:
    build:
      context: ./identity-service
      dockerfile: Dockerfile
    image: identity-service:latest
    container_name: identity-service
    env_file:
      - ./identity-service/.env.docker
    ports:
      - "8080:8080"
    environment:
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    depends_on:
      - eureka-server
      - api-gateway
    networks:
      - backend

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    image: user-service:latest
    container_name: user-service
    ports:
      - "8081:8081"
    env_file:
      - /user-service/.env.docker
    depends_on:
      - eureka-server
      - api-gateway
    networks:
      - backend

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    image: product-service:latest
    container_name: product-service
    env_file:
      - ./product-service/.env.docker
    depends_on:
      - eureka-server
      - api-gateway
    ports:
      - "8082:8082"
    networks:
      - backend


#  notification-service:
#    image: notification-service
#    container_name: notification-service
#    depends_on:
#      - kafka-1
#      - mongodb
#    working_dir: /app
#    command: [ "java", "-jar", "notification-service.jar" ]
#    ports:
#      - 8086:8086
#    restart: on-failure
#    networks:
#        - backend

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    image: 'order-service'
    container_name: order-service
    depends_on:
      - eureka-server
      - api-gateway
    env_file:
      - ./order-service/.envrc.docker
    ports:
      - "8088:8088"
    networks:
      - backend

  chat-service:
    build:
      context: ./chatService
      dockerfile: Dockerfile
    image: 'chat-service'
    container_name: chat-service
    env_file:
      - ./chatService/.envrc.docker
    depends_on:
      - eureka-server
      - api-gateway
    ports:
      - "8090:8090"
    networks:
      - backend

  recommendation-service:
    build:
      context: ./recommendation-service
      dockerfile: Dockerfile
    image: 'recommendation-service'
    container_name: recommendation-service
    env_file:
      - ./recommendation-service/.env.docker
    depends_on:
      - eureka-server
      - api-gateway
    ports:
      - "5001:5001"
    networks:
      - backend

  mysql:
    image: 'mysql:8.0'
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-db.mysql.sql:/docker-entrypoint-initdb.d/init-db.mysql.sql:ro
    networks:
      - backend

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    image: 'payment-service'
    env_file:
      - ./payment-service/.envrc.docker
    container_name: payment-service
    depends_on:
      - mysql
      - eureka-server
      - api-gateway
    ports:
      - "8089:8089"
    networks:
      - backend

#  mariadb:
#    image: mariadb:10.11
#    container_name: mariadb
#    environment:
#      MYSQL_ROOT_PASSWORD: root
#    ports:
#      - "3308:3306"
#    volumes:
#      - db_data:/var/lib/mysql
#      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
#    networks:
#      - backend

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    restart: on-failure
    networks:
      - backend

  kafka-1:
    image: confluentinc/cp-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
    networks:
      - backend

#  mongodb:
#    image: mongo:5
#    container_name: mongo
#    restart: always
#    ports:
#      - "27017:27017"
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: root
#    networks:
#      - backend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    networks:
      - backend

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.5
    container_name: logstash
    depends_on:
      - elasticsearch
    volumes:
      - ./elk-stack/logstash:/usr/share/logstash/pipeline
    ports:
      - "5000:5000"  # Port nhận log TCP từ Gateway
    networks:
      - backend

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.5
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  db_data:
  redis_data:
  mysql_data:

