services:

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    image: eureka-service:latest
    container_name: eureka-server
    depends_on:
      - logstash
      - kafka
      - zookeeper
      - mysql
      - redis
      - elasticsearch
      - kibana
      - mariadb
    ports:
      - "8761:8761"
    networks:
      - backend

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    image: api-gateway:latest
    container_name: api-gateway
    depends_on:
      - eureka-server
    env_file:
      - ./api-gateway/.envrc.docker
    environment:
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - IDENTITY_SERVICE_URL=http://identity-service:8080/identity
      - PRODUCT_SERVICE_URL=http://product-service:8082/product
    ports:
      - "8888:8888"
    networks:
      - backend

  identity-service:
    build:
      context: ./identity-service
      dockerfile: Dockerfile
    image: identity-service:latest
    container_name: identity-service
    env_file:
      - ./identity-service/.env.docker
    ports:
      - "8080:8080"
    environment:
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - USER_SERVICE_URL=http://user-service:8081/user
    depends_on:
      - eureka-server
      - api-gateway
    networks:
      - backend

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    image: user-service:latest
    container_name: user-service
    ports:
      - "8081:8081"
    env_file:
      - /user-service/.env.docker
    environment:
      - IDENTITY_SERVICE_URL=http://identity-service:8080/identity/internal/accounts
    depends_on:
      - eureka-server
      - api-gateway
    networks:
      - backend

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    image: product-service:latest
    container_name: product-service
    env_file:
      - ./product-service/.env.docker
    environment:
      - USER_SERVICE_URL=http://user-service:8081/user/internal
    depends_on:
      - eureka-server
      - api-gateway
    ports:
      - "8082:8082"
    networks:
      - backend


  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    image: notification-service
    container_name: notification-service
    env_file:
      - ./notification-service/.env.docker
    depends_on:
      - eureka-server
      - api-gateway
    ports:
      - "8086:8086"
    networks:
        - backend

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    image: 'order-service'
    container_name: order-service
    depends_on:
      - eureka-server
      - api-gateway
    env_file:
      - ./order-service/.envrc.docker
    environment:
      - PRODUCT_SERVICE_URL=http://product-service:8082/product/internal
      - USER_SERVICE_URL=http://user-service:8081/user/internal
      - PAYMENT_SERVICE_URL=http://payment-service:8089/internal/payments
      - IDENTITY_SERVICE_URL=http://identity-service:8080/identity/internal/accounts
    ports:
      - "8088:8088"
    networks:
      - backend

  chat-service:
    build:
      context: ./chatService
      dockerfile: Dockerfile
    image: 'chat-service'
    container_name: chat-service
    env_file:
      - ./chatService/.envrc.docker
    environment:
      - PRODUCT_SERVICE_URL=http://product-service:8082/product/internal
    depends_on:
      - eureka-server
      - api-gateway
    ports:
      - "8090:8090"
    networks:
      - backend

  recommendation-service:
    build:
      context: ./recommendation-service
      dockerfile: Dockerfile
    image: 'recommendation-service'
    container_name: recommendation-service
    env_file:
      - ./recommendation-service/.env.docker
    environment:
      - INSTANCE_HOST=recommendation-service
    depends_on:
      - eureka-server
      - api-gateway
    ports:
      - "5001:5001"
    networks:
      - backend

  mysql:
    image: 'mysql:8.0'
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-db.mysql.sql:/docker-entrypoint-initdb.d/init-db.mysql.sql:ro
    networks:
      - backend

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    image: 'payment-service'
    env_file:
      - ./payment-service/.envrc.docker
    environment:
      - ORDER_SERVICE_URL=http://order-service:8088/internal/orders
      - FRONTEND_URL=http://localhost:3000
      - VNP_RETURN_URL=https://b552-2402-800-63f9-3105-b425-6dac-5bda-8a71.ngrok-free.app/api/internal/payments/status
    container_name: payment-service
    depends_on:
      - mysql
      - eureka-server
      - api-gateway
    ports:
      - "8089:8089"
    networks:
      - backend
  cart-service:
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    image: 'cart-service'
    env_file:
      - ./cart-service/.envrc.docker
    environment:
      - PRODUCT_SERVICE_URL=http://product-service:8082/product
      - USER_SERVICE_URL=http://user-service:8081/user/internal
    container_name: cart-service
    depends_on:
      - eureka-server
      - api-gateway
    ports:
      - "8085:8085"
    networks:
      - backend

  mariadb:
    image: mariadb:10.11
    container_name: mariadb
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3308:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./init-db.mariadb.sql:/docker-entrypoint-initdb.d/init-db.mariadb.sql:ro
    networks:
      - backend

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    restart: on-failure
    networks:
      - backend

  kafka:
    image: 'bitnami/kafka:latest'
    depends_on:
      - zookeeper
    container_name: kafka
    hostname: kafka
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - backend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    networks:
      - backend

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.5
    container_name: logstash
    depends_on:
      - elasticsearch
    volumes:
      - ./elk-stack/logstash:/usr/share/logstash/pipeline
    ports:
      - "5000:5000"  # Port nhận log TCP từ Gateway
    networks:
      - backend

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.5
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend

  shoes-store-app-fe:
    build:
      context: ../shoes-store-app-fe
      dockerfile: Dockerfile
    image: shoes-store-app-fe:latest
    container_name: shoes-store-app-fe
    depends_on:
      - api-gateway
      - eureka-server
    ports:
        - "3000:80"
    env_file:
      - ../shoes-store-app-fe/.env.docker
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  db_data:
  redis_data:
  mysql_data:

